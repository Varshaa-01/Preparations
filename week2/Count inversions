https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1

class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    
     long long count;
    
    void Merge(long long arr[],long long l,long long mid,long long r){
        long long B[r+1];
        long long i=l,j=mid+1,k=l;
        while(i<=mid && j<=r){
            if(arr[i] <= arr[j]){
                B[k++]=arr[i++];
            }
            else{
                B[k++]=arr[j++];
                count+=mid-i+1;
            }
        }
        while(i<=mid)
           B[k++]=arr[i++];
        while(j<=r)
           B[k++]=arr[j++];
        for(long long i=l;i<=r;i++){
            arr[i]=B[i];
        }
    }
    
    void Mergesort(long long arr[],long long l,long long r){
        if(l<r){
            long long mid=(l+r)/2;
            Mergesort(arr,l,mid);
            Mergesort(arr,mid+1,r);
            Merge(arr,l,mid,r);
        }
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        count=0;
        Mergesort(arr,0,N-1);
        return count;
    }

};

// { Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
  
